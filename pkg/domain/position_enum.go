// Code generated by go-enum
// DO NOT EDIT!

package domain

import (
	"fmt"
)

const (
	// PositionEventTypeSnapshot is a PositionEventType of type Snapshot
	PositionEventTypeSnapshot PositionEventType = iota
	// PositionEventTypeNew is a PositionEventType of type New
	PositionEventTypeNew
	// PositionEventTypeUpdate is a PositionEventType of type Update
	PositionEventTypeUpdate
	// PositionEventTypeCancel is a PositionEventType of type Cancel
	PositionEventTypeCancel
)

const _PositionEventTypeName = "snapshotnewupdatecancel"

var _PositionEventTypeMap = map[PositionEventType]string{
	0: _PositionEventTypeName[0:8],
	1: _PositionEventTypeName[8:11],
	2: _PositionEventTypeName[11:17],
	3: _PositionEventTypeName[17:23],
}

// String implements the Stringer interface.
func (x PositionEventType) String() string {
	if str, ok := _PositionEventTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("PositionEventType(%d)", x)
}

var _PositionEventTypeValue = map[string]PositionEventType{
	_PositionEventTypeName[0:8]:   0,
	_PositionEventTypeName[8:11]:  1,
	_PositionEventTypeName[11:17]: 2,
	_PositionEventTypeName[17:23]: 3,
}

// ParsePositionEventType attempts to convert a string to a PositionEventType
func ParsePositionEventType(name string) (PositionEventType, error) {
	if x, ok := _PositionEventTypeValue[name]; ok {
		return x, nil
	}
	return PositionEventType(0), fmt.Errorf("%s is not a valid PositionEventType", name)
}

const (
	// PositionStatusActive is a PositionStatus of type Active
	PositionStatusActive PositionStatus = iota
	// PositionStatusClosed is a PositionStatus of type Closed
	PositionStatusClosed
)

const _PositionStatusName = "activeclosed"

var _PositionStatusMap = map[PositionStatus]string{
	0: _PositionStatusName[0:6],
	1: _PositionStatusName[6:12],
}

// String implements the Stringer interface.
func (x PositionStatus) String() string {
	if str, ok := _PositionStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("PositionStatus(%d)", x)
}

var _PositionStatusValue = map[string]PositionStatus{
	_PositionStatusName[0:6]:  0,
	_PositionStatusName[6:12]: 1,
}

// ParsePositionStatus attempts to convert a string to a PositionStatus
func ParsePositionStatus(name string) (PositionStatus, error) {
	if x, ok := _PositionStatusValue[name]; ok {
		return x, nil
	}
	return PositionStatus(0), fmt.Errorf("%s is not a valid PositionStatus", name)
}
