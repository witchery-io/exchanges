// Code generated by go-enum
// DO NOT EDIT!

package domain

import (
	"fmt"
)

const (
	// OrderContextExchange is a OrderContext of type Exchange
	OrderContextExchange OrderContext = iota
	// OrderContextMargin is a OrderContext of type Margin
	OrderContextMargin
	// OrderContextFunding is a OrderContext of type Funding
	OrderContextFunding
)

const _OrderContextName = "exchangemarginfunding"

var _OrderContextMap = map[OrderContext]string{
	0: _OrderContextName[0:8],
	1: _OrderContextName[8:14],
	2: _OrderContextName[14:21],
}

// String implements the Stringer interface.
func (x OrderContext) String() string {
	if str, ok := _OrderContextMap[x]; ok {
		return str
	}
	return fmt.Sprintf("OrderContext(%d)", x)
}

var _OrderContextValue = map[string]OrderContext{
	_OrderContextName[0:8]:   0,
	_OrderContextName[8:14]:  1,
	_OrderContextName[14:21]: 2,
}

// ParseOrderContext attempts to convert a string to a OrderContext
func ParseOrderContext(name string) (OrderContext, error) {
	if x, ok := _OrderContextValue[name]; ok {
		return x, nil
	}
	return OrderContext(0), fmt.Errorf("%s is not a valid OrderContext", name)
}

const (
	// OrderDirectionBuy is a OrderDirection of type Buy
	OrderDirectionBuy OrderDirection = iota
	// OrderDirectionSell is a OrderDirection of type Sell
	OrderDirectionSell
)

const _OrderDirectionName = "buysell"

var _OrderDirectionMap = map[OrderDirection]string{
	0: _OrderDirectionName[0:3],
	1: _OrderDirectionName[3:7],
}

// String implements the Stringer interface.
func (x OrderDirection) String() string {
	if str, ok := _OrderDirectionMap[x]; ok {
		return str
	}
	return fmt.Sprintf("OrderDirection(%d)", x)
}

var _OrderDirectionValue = map[string]OrderDirection{
	_OrderDirectionName[0:3]: 0,
	_OrderDirectionName[3:7]: 1,
}

// ParseOrderDirection attempts to convert a string to a OrderDirection
func ParseOrderDirection(name string) (OrderDirection, error) {
	if x, ok := _OrderDirectionValue[name]; ok {
		return x, nil
	}
	return OrderDirection(0), fmt.Errorf("%s is not a valid OrderDirection", name)
}

const (
	// OrderEventTypeSnapshot is a OrderEventType of type Snapshot
	OrderEventTypeSnapshot OrderEventType = iota
	// OrderEventTypeNew is a OrderEventType of type New
	OrderEventTypeNew
	// OrderEventTypeUpdate is a OrderEventType of type Update
	OrderEventTypeUpdate
	// OrderEventTypeCancel is a OrderEventType of type Cancel
	OrderEventTypeCancel
)

const _OrderEventTypeName = "snapshotnewupdatecancel"

var _OrderEventTypeMap = map[OrderEventType]string{
	0: _OrderEventTypeName[0:8],
	1: _OrderEventTypeName[8:11],
	2: _OrderEventTypeName[11:17],
	3: _OrderEventTypeName[17:23],
}

// String implements the Stringer interface.
func (x OrderEventType) String() string {
	if str, ok := _OrderEventTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("OrderEventType(%d)", x)
}

var _OrderEventTypeValue = map[string]OrderEventType{
	_OrderEventTypeName[0:8]:   0,
	_OrderEventTypeName[8:11]:  1,
	_OrderEventTypeName[11:17]: 2,
	_OrderEventTypeName[17:23]: 3,
}

// ParseOrderEventType attempts to convert a string to a OrderEventType
func ParseOrderEventType(name string) (OrderEventType, error) {
	if x, ok := _OrderEventTypeValue[name]; ok {
		return x, nil
	}
	return OrderEventType(0), fmt.Errorf("%s is not a valid OrderEventType", name)
}

const (
	// OrderStatusActive is a OrderStatus of type Active
	OrderStatusActive OrderStatus = iota
	// OrderStatusExecuted is a OrderStatus of type Executed
	OrderStatusExecuted
	// OrderStatusCanceled is a OrderStatus of type Canceled
	OrderStatusCanceled
	// OrderStatusPartially is a OrderStatus of type Partially
	OrderStatusPartially
)

const _OrderStatusName = "activeexecutedcanceledpartially"

var _OrderStatusMap = map[OrderStatus]string{
	0: _OrderStatusName[0:6],
	1: _OrderStatusName[6:14],
	2: _OrderStatusName[14:22],
	3: _OrderStatusName[22:31],
}

// String implements the Stringer interface.
func (x OrderStatus) String() string {
	if str, ok := _OrderStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("OrderStatus(%d)", x)
}

var _OrderStatusValue = map[string]OrderStatus{
	_OrderStatusName[0:6]:   0,
	_OrderStatusName[6:14]:  1,
	_OrderStatusName[14:22]: 2,
	_OrderStatusName[22:31]: 3,
}

// ParseOrderStatus attempts to convert a string to a OrderStatus
func ParseOrderStatus(name string) (OrderStatus, error) {
	if x, ok := _OrderStatusValue[name]; ok {
		return x, nil
	}
	return OrderStatus(0), fmt.Errorf("%s is not a valid OrderStatus", name)
}

const (
	// OrderTypeStop is a OrderType of type Stop
	OrderTypeStop OrderType = iota
	// OrderTypeMarket is a OrderType of type Market
	OrderTypeMarket
	// OrderTypeLimit is a OrderType of type Limit
	OrderTypeLimit
)

const _OrderTypeName = "stopmarketlimit"

var _OrderTypeMap = map[OrderType]string{
	0: _OrderTypeName[0:4],
	1: _OrderTypeName[4:10],
	2: _OrderTypeName[10:15],
}

// String implements the Stringer interface.
func (x OrderType) String() string {
	if str, ok := _OrderTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("OrderType(%d)", x)
}

var _OrderTypeValue = map[string]OrderType{
	_OrderTypeName[0:4]:   0,
	_OrderTypeName[4:10]:  1,
	_OrderTypeName[10:15]: 2,
}

// ParseOrderType attempts to convert a string to a OrderType
func ParseOrderType(name string) (OrderType, error) {
	if x, ok := _OrderTypeValue[name]; ok {
		return x, nil
	}
	return OrderType(0), fmt.Errorf("%s is not a valid OrderType", name)
}
